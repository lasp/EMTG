// EMTG: Evolutionary Mission Trajectory Generator
// An open-source global optimization tool for preliminary mission design
// Provided by NASA Goddard Space Flight Center
//
// Copyright (c) 2013 - 2024 United States Government as represented by the
// Administrator of the National Aeronautics and Space Administration.
// All Other Rights Reserved.

// Copyright (c) 2024 The Regents of the University of Colorado.
// All Other Rights Reserved.

// Licensed under the NASA Open Source License (the "License"); 
// You may not use this file except in compliance with the License. 
// You may obtain a copy of the License at:
// https://opensource.org/licenses/NASA-1.3
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
// express or implied.   See the License for the specific language
// governing permissions and limitations under the License.

//header file for journeyoptions class
//auto-generated by make_EMTG_missionoptions_journeyoptions.py

#pragma once

#include "EMTG_enums.h"
#include "file_utilities.h"

#include <vector>
#include <string>
#include <iostream>

namespace EMTG
{
    class JourneyOptions
    {
    public:
        //constructor - just initializes everything
        JourneyOptions();
        JourneyOptions(std::string optionsfilename);
        JourneyOptions(std::ifstream& optionsFileStream, size_t& lineNumber);
        
        //destructor
        ~JourneyOptions(){};
        
        //parser
        void parse_journey(std::ifstream& optionsFileStream, size_t& lineNumber);
        void parse_line(const std::string& linestring, size_t& lineNumber, std::ifstream& optionsFileStream);
        
        //writer
        void write(const std::string& optionsFileName, const bool& newFile = true, const bool& writeAll = true);
        
        //fields
        size_t number_of_phases;//how many phases in this journey?
        double maximum_mass;
        std::string journey_name;//Journey name
        std::string journey_central_body;//Journey central body name
        std::vector<int> destination_list;//destination list, as indices from the Universe file
        std::vector<int> sequence;//flyby sequence, as indices from the Universe file
        PhaseType phase_type;//mission type. Choices are 0 - MGALTS, 1 - FBLTS, 2 - MGALT, 3 - FBLT, 4 - PSBI, 5 - PSFB, 6 - MGAnDSMs, 7 - CoastPhase, 8 - SundmanCoastPhase, 9 - variable (do not use), 10 - ProbeEntryPhase, 11 - ControlLawThrustPhase.
        size_t impulses_per_phase;//impulses per phase
        ThrustControlLaw thrust_control_law;//Thrust control law. Choices are 0 - Cartesian (not implemented), 1 - velocity direction, 2 - anti-velocity direction.
        ControlMagnitudeType force_unit_magnitude_control;//Force unit magnitude control? Choices are 0 - free control magnitude, 1 - force unit magnitude, 2 - force zero magnitude.
        bool force_fixed_inertial_control;//Force fixed inertial control? All control vectors in a phase must be identical if this is selected.
        bool override_num_steps;//Override this journey's number of steps?
        size_t number_of_steps;//Number of time steps for this journey, if overriden
        bool override_duty_cycle;//Journey override global duty cycle
        double duty_cycle;//Journey duty cycle
        bool override_PropagatorType;//override propagator type?
        PropagatorType propagatorType;//propagator type
        bool override_integration_step_size;//Override global integration step size?
        double integration_step_size;//integration step size (s)
        bool override_flyby_altitude_bounds;//Override journey flyby altitude?
        std::vector<double> flyby_altitude_bounds;//Lower and upper bound on journey flyby altitude, if override is active (only applies to the departure flyby, if there is one)
        bool PeriapseArrival_override_altitude;//Override journey periapse arrival altitude?
        std::vector<double> PeriapseArrival_altitude_bounds;//Lower and upper bound on journey periapse arrival altitude, if override is active (km)
        std::vector<double> PeriapseDeparture_altitude_bounds;//PeriapseDeparture altitude bounds (in km)
        size_t num_interior_control_points;//number of interior control points for parallel shooting phase types
        double CoastPhaseMatchPointFraction;//coast phase match point fraction
        double CoastPhaseForwardIntegrationStepLength;//coast phase forward integration step length (seconds)
        double CoastPhaseBackwardIntegrationStepLength;//coast phase backward integration step length (seconds)
        double journey_end_TCM;//Journey-end TCM magnitude (km/s)
        bool enable_periapse_burns;//Enable periapse burns in ephemeris pegged flybys?
        bool bounded_departure_date;//Bound the departure epoch?
        int timebounded;//Choices are 0 - unbounded, 1 - bounded flight time, 2 - bounded arrival date.
        std::vector<double> departure_date_bounds;//MJD
        std::vector<double> wait_time_bounds;//days
        std::vector<double> flight_time_bounds;//days
        std::vector<double> arrival_date_bounds;//MJD
        DepartureType departure_type;//journey departure type. Choices are 0 - launch or direct insertion, 1 - depart from parking orbit (you can use this one in place of a launch vehicle model, and the departure burn will be done with the EDS motor), 2 - free direct departure, i.e. do not burn to get the departure v_infinity (used for when operations about a small body are not modeled but the departure velocity is known), 3 - flyby (only valid for successive journeys), 4 - flyby with fixed v-infinity-out (only valid for successive journeys), 5 - spiral-out from circular orbit (low-thrust missions only), 6 - zero-turn flyby (for small bodies)
        std::vector<double> initial_impulse_bounds;//what are the bounds on the initial impulse for each journey in km/s
        bool force_free_point_direct_insertion_along_velocity_vector;//Force free point direct insertion burn to be along the inertial velocity vector?
        std::vector<bool> departure_elements_vary_flag;//one entry for each element
        std::vector<double> departure_elements;//cartesian state or SMA, ECC, INC, RAAN, AOP, TA
        std::vector<double> departure_elements_bounds;//bounds on elements or state components, two entries for each element
        double departure_elements_reference_epoch;//MJD
        StateRepresentation departure_elements_state_representation;//departure free point state representation (Cartesian, SphericalRADEC, SphericalAZFPA, COE, MEE, IncomingBplane, OutgoingBplane, IncomingBplaneRpTA, OutgoingBplaneRpTA)
        ReferenceFrame departure_elements_frame;//reference frame for journey departure elements. Choices are 0 - J2000_ICRF, 1 - J2000_BCI, 2 - J2000_BCF, 3 - TrueOfDate_BCI, 4 - TrueOfDate_BCF, 5 - Principle Axes, 6 - Topocentric, 7 - Polar, 8 - SAM, 9 - ObjectReferenced.
        bool AllowJourneyFreePointDepartureToPropagate;//Allow journey departure free point boundary to propagate (otherwise it is a fixed waypoint)
        double maximum_starting_mass_increment;//negative number indicates mass drop
        double minimum_starting_mass_increment;//negative number indicates mass drop
        double fixed_starting_mass_increment;//negative number indicates mass drop
        double fixed_ending_mass_increment;//negative number indicates mass drop
        bool variable_mass_increment;//Vary initial mass increment?
        bool constrain_initial_mass;//Constrain initial mass?
        double maximum_initial_mass;//If initial mass for this journey is constrained, enter the constraint value here.
        BoundaryClass departure_class;//journey departure boundary class. Choices are 0 - Ephemeris-pegged (default EMTG), 1 - Free point, 2 - Ephemeris-referenced, 3 - Periapse.
        std::vector<double> departure_ellipsoid_axes;//journey departure ellipsoid axes (3)
        ArrivalType arrival_type;//journey arrival type. Choices are 0 - insertion into parking orbit (use chemical Isp), 1 - rendezvous (use chemical Isp), 2 - intercept with bounded V_infinity, 3 - low-thrust rendezvous (does not work if terminal phase is not low-thrust), 4 - match final v-infinity vector, 5 - match final v-infinity vector (low-thrust), 6 - capture spiral, 7 - momentum transfer (kinetic impactor).
        std::vector<bool> arrival_elements_vary_flag;//one entry for each element
        std::vector<double> arrival_elements;//cartesian state or SMA, ECC, INC, RAAN, AOP, TA
        std::vector<double> arrival_elements_bounds;//bounds on elements or state components, two entries for each element
        double arrival_elements_reference_epoch;//MJD
        StateRepresentation arrival_elements_state_representation;//arrival free point state representation (Cartesian, SphericalRADEC, SphericalAZFPA, COE, MEE, IncomingBplane, OutgoingBplane, IncomingBplaneRpTA, OutgoingBplaneRpTA)
        ReferenceFrame arrival_elements_frame;//reference frame for journey arrival elements. Choices are 0 - J2000_ICRF, 1 - J2000_BCI, 2 - J2000_BCF, 3 - TrueOfDate_BCI, 4 - TrueOfDate_BCF, 5 - Principle Axes, 6 - Topocentric, 7 - Polar, 8 - SAM, 9 - ObjectReferenced.
        bool AllowJourneyFreePointArrivalToPropagate;//Allow journey arrival free point boundary to propagate (otherwise it is a fixed waypoint)
        std::vector<double> final_velocity;//Bounds on this journey's final velocity (in km/s)
        double forced_terminal_coast;//Journey forced terminal coast (in days)
        double forced_initial_coast;//Journey forced initial coast (in days)
        BoundaryClass arrival_class;//journey arrival boundary class. Choices are 0 - Ephemeris-pegged (default EMTG), 1 - Free point, 2 - Ephemeris-referenced, 3 - Periapse.
        std::vector<double> arrival_ellipsoid_axes;//journey arrival ellipsoid axes (3)
        double zero_turn_flyby_distance;//encounter distance (from center of object) for a zero-turn flyby (km)
        double terminal_intercept_flyby_distance;//encounter distance (from center of object) for an ephemeris-pegged intercept (km)
        double escape_spiral_starting_radius;//Starting orbital radius for an Edelbaum escape spiral (km)
        double escape_spiral_final_radius;//Final orbit radius for an Edelbaum escape spiral (km)
        double capture_spiral_final_radius;//Final orbit radius for an Edelbaum capture spiral (km)
        double capture_spiral_starting_radius;//Starting orbital radius for an Edelbaum capture spiral (km)
        bool FreePointArrival_print_target_spec;//Print a target spec for free point arrival at the end of this journey?
        double journey_end_deltav;//Journey-end delta-v (km/s)
        PropulsionSystemChoice journey_end_propulsion_system;//Propulsion system for journey-end maneuver. Choices are 0 - Monoprop chemical, 1 - Biprop chemical, 2 - Electric.
        std::vector<size_t> perturbation_bodies;//Universe file indices of each perturbation body
        bool stage_after_departure;//Stage after departure?
        bool stage_before_arrival;//Stage before arrival?
        bool stage_after_arrival;//Stage after arrival?
        bool freeze_decision_variables;//Freeze this journey's decision variables?
        std::vector<size_t> freeze_maneuver_variables;//Freeze any of this journey's maneuver's decision variables? Enter a list of maneuver indices
        double ephemeris_pegged_orbit_insertion_SMA;//SMA (in km) for ephemeris pegged orbit insertion
        double ephemeris_pegged_orbit_insertion_ECC;//ECC for ephemeris pegged orbit insertion
        std::vector<double> ephemeris_pegged_orbit_insertion_dv_bounds;//Lower and upper bounds for ephemeris pegged orbit insertion Delta v (km/s)
        double impact_momentum_enhancement_factor;//Impact momentum enhancement factor for planetary defense (also called beta)
        bool perturb_drag;//Aerodynamic drag?
        double spacecraft_drag_area;//spacecraft area (for aerodynamic drag, in m^2)
        double coefficient_of_drag;//coefficient of drag, i.e. Cd (unitless)
        std::string AtmosphericDensityModelKey;//Atmospheric density model
        std::string AtmosphericDensityModelDataFile;//File defining atmospheric density model
        bool perturb_central_body_gravity_harmonics;//Include central body gravitational harmonics perturbations?
        size_t central_body_gravity_degree;//Maximum degree to include for central body gravitational harmonics
        size_t central_body_gravity_order;//Maximum order to include for central body gravitational harmonics
        std::string central_body_gravity_file;//STK .grv style gravity model file
        double probe_separation_impulse;//Probe separation impulse (Ns)
        double probe_mass;//Probe mass (kg)
        std::vector<bool> Probe_AEI_elements_vary_flag;//one entry for each element
        std::vector<double> Probe_AEI_elements;//cartesian state or SMA, ECC, INC, RAAN, AOP, TA
        std::vector<double> Probe_AEI_elements_bounds;//bounds on elements or state components, two entries for each element
        double Probe_AEI_elements_reference_epoch;//MJD
        StateRepresentation Probe_AEI_elements_state_representation;//probe arrival free point state representation (Cartesian, SphericalRADEC, SphericalAZFPA, COE)
        ReferenceFrame Probe_AEI_elements_frame;//reference frame for journey arrival elements. Choices are 0 - J2000_ICRF, 1 - J2000_BCI, 2 - J2000_BCF, 3 - TrueOfDate_BCI, 4 - TrueOfDate_BCF, 5 - Principle Axes, 6 - Topocentric, 7 - Polar, 8 - SAM.
        std::vector<bool> Probe_End_elements_vary_flag;//one entry for each element
        std::vector<double> Probe_End_elements;//cartesian state or SMA, ECC, INC, RAAN, AOP, TA
        std::vector<double> Probe_End_elements_bounds;//bounds on elements or state components, two entries for each element
        double Probe_End_elements_reference_epoch;//MJD
        StateRepresentation Probe_End_elements_state_representation;//probe arrival free point state representation (Cartesian, SphericalRADEC, SphericalAZFPA, COE)
        ReferenceFrame Probe_End_elements_frame;//reference frame for journey arrival elements. Choices are 0 - J2000_ICRF, 1 - J2000_BCI, 2 - J2000_BCF, 3 - TrueOfDate_BCI, 4 - TrueOfDate_BCF, 5 - Principle Axes, 6 - Topocentric, 7 - Polar, 8 - SAM.
        bool ModelProbeSecondPhase;//Model the probe's descent phase
        bool AllowJourneyProbeAEIToPropagate;//Allow probe AEI free point boundary to propagate (otherwise it is a fixed waypoint)
        bool AllowJourneyProbeEndToPropagate;//Allow probe end free point boundary to propagate (otherwise it is a fixed waypoint)
        std::vector<double> probe_communication_distance_bounds;//Probe-spacecraft communication distance constraint (km)
        bool perturb_drag_probe_separation_to_AEI;//Aerodynamic drag on probe from separation to AEI?
        bool perturb_drag_probe_AEI_to_end;//Aerodynamic drag on probe from AEI to end of probe mission?
        double probe_drag_area_probe_separation_to_AEI;//probe area prior to AEI (for aerodynamic drag, in m^2)
        double probe_drag_area_probe_AEI_to_end;//probe area after AEI (for aerodynamic drag, in m^2)
        double probe_coefficient_of_drag_probe_separation_to_AEI;//probe coefficient of drag prior to AEI, i.e. Cd (unitless)
        double probe_coefficient_of_drag_probe_AEI_to_end;//probe coefficient of drag after AEI, i.e. Cd (unitless)
        std::vector<double> probe_AEI_velocity;//Bounds on the probe's final velocity at AEI (in km/s)
        std::vector<double> probe_end_velocity;//Bounds on the probe's final velocity at end of mission (in km/s)
        double ProbeSeparationToAEI_MatchPointFraction;//probe separation to AEI match point fraction
        double ProbeSeparationToAEI_ForwardIntegrationStepLength;//probe separation to AEI forward integration step length (seconds)
        double ProbeSeparationToAEI_BackwardIntegrationStepLength;//probe separation to AEI backward integration step length (seconds)
        double ProbeAEI_to_end_MatchPointFraction;//probe AEI to end match point fraction
        double ProbeAEI_to_end_ForwardIntegrationStepLength;//probe AEI to end forward integration step length (seconds)
        double ProbeAEI_to_end_BackwardIntegrationStepLength;//probe AEI to end backward integration step length (seconds)
        bool Probe_AEI_print_target_spec;//Print a target spec for the probe state at the end of the first sub-phase?
        bool Probe_end_print_target_spec;//Print a target spec for the probe state at the end of the second sub-phase?
        bool print_this_journey_options_no_matter_what;//Always print this journey's options to the .emtgopt file?
        bool override_ephemeris_output_resolution;//Override default ephemeris output resolution?
        double EphemerisOutputResolution;//If overriding default ephemeris output resolution, this is the overriding value (seconds)
        
        //Constraints
        std::vector<std::string> ManeuverConstraintDefinitions;
        std::vector<std::string> BoundaryConstraintDefinitions;
        std::vector<std::string> PhaseDistanceConstraintDefinitions;
        
        //Decision vector
        std::vector< std::tuple<std::string, double> > trialX;
        
    private:
        //lower and upper bounds
        std::vector<int> destination_list_lowerBound;
        std::vector<int> destination_list_upperBound;
        int sequence_lowerBound;
        int sequence_upperBound;
        PhaseType phase_type_lowerBound;
        PhaseType phase_type_upperBound;
        size_t impulses_per_phase_lowerBound;
        size_t impulses_per_phase_upperBound;
        ThrustControlLaw thrust_control_law_lowerBound;
        ThrustControlLaw thrust_control_law_upperBound;
        ControlMagnitudeType force_unit_magnitude_control_lowerBound;
        ControlMagnitudeType force_unit_magnitude_control_upperBound;
        size_t number_of_steps_lowerBound;
        size_t number_of_steps_upperBound;
        double duty_cycle_lowerBound;
        double duty_cycle_upperBound;
        PropagatorType propagatorType_lowerBound;
        PropagatorType propagatorType_upperBound;
        double integration_step_size_lowerBound;
        double integration_step_size_upperBound;
        std::vector<double> flyby_altitude_bounds_lowerBound;
        std::vector<double> flyby_altitude_bounds_upperBound;
        std::vector<double> PeriapseArrival_altitude_bounds_lowerBound;
        std::vector<double> PeriapseArrival_altitude_bounds_upperBound;
        std::vector<double> PeriapseDeparture_altitude_bounds_lowerBound;
        std::vector<double> PeriapseDeparture_altitude_bounds_upperBound;
        size_t num_interior_control_points_lowerBound;
        size_t num_interior_control_points_upperBound;
        double CoastPhaseMatchPointFraction_lowerBound;
        double CoastPhaseMatchPointFraction_upperBound;
        double CoastPhaseForwardIntegrationStepLength_lowerBound;
        double CoastPhaseForwardIntegrationStepLength_upperBound;
        double CoastPhaseBackwardIntegrationStepLength_lowerBound;
        double CoastPhaseBackwardIntegrationStepLength_upperBound;
        double journey_end_TCM_lowerBound;
        double journey_end_TCM_upperBound;
        int timebounded_lowerBound;
        int timebounded_upperBound;
        double departure_date_bounds_lowerBound;
        double departure_date_bounds_upperBound;
        double wait_time_bounds_lowerBound;
        double wait_time_bounds_upperBound;
        double flight_time_bounds_lowerBound;
        double flight_time_bounds_upperBound;
        double arrival_date_bounds_lowerBound;
        double arrival_date_bounds_upperBound;
        DepartureType departure_type_lowerBound;
        DepartureType departure_type_upperBound;
        double initial_impulse_bounds_lowerBound;
        double initial_impulse_bounds_upperBound;
        double departure_elements_lowerBound;
        double departure_elements_upperBound;
        double departure_elements_bounds_lowerBound;
        double departure_elements_bounds_upperBound;
        double departure_elements_reference_epoch_lowerBound;
        double departure_elements_reference_epoch_upperBound;
        StateRepresentation departure_elements_state_representation_lowerBound;
        StateRepresentation departure_elements_state_representation_upperBound;
        ReferenceFrame departure_elements_frame_lowerBound;
        ReferenceFrame departure_elements_frame_upperBound;
        double maximum_starting_mass_increment_lowerBound;
        double maximum_starting_mass_increment_upperBound;
        double minimum_starting_mass_increment_lowerBound;
        double minimum_starting_mass_increment_upperBound;
        double fixed_starting_mass_increment_lowerBound;
        double fixed_starting_mass_increment_upperBound;
        double fixed_ending_mass_increment_lowerBound;
        double fixed_ending_mass_increment_upperBound;
        double maximum_initial_mass_lowerBound;
        double maximum_initial_mass_upperBound;
        BoundaryClass departure_class_lowerBound;
        BoundaryClass departure_class_upperBound;
        double departure_ellipsoid_axes_lowerBound;
        double departure_ellipsoid_axes_upperBound;
        ArrivalType arrival_type_lowerBound;
        ArrivalType arrival_type_upperBound;
        double arrival_elements_lowerBound;
        double arrival_elements_upperBound;
        double arrival_elements_bounds_lowerBound;
        double arrival_elements_bounds_upperBound;
        double arrival_elements_reference_epoch_lowerBound;
        double arrival_elements_reference_epoch_upperBound;
        StateRepresentation arrival_elements_state_representation_lowerBound;
        StateRepresentation arrival_elements_state_representation_upperBound;
        ReferenceFrame arrival_elements_frame_lowerBound;
        ReferenceFrame arrival_elements_frame_upperBound;
        double final_velocity_lowerBound;
        double final_velocity_upperBound;
        double forced_terminal_coast_lowerBound;
        double forced_terminal_coast_upperBound;
        double forced_initial_coast_lowerBound;
        double forced_initial_coast_upperBound;
        BoundaryClass arrival_class_lowerBound;
        BoundaryClass arrival_class_upperBound;
        double arrival_ellipsoid_axes_lowerBound;
        double arrival_ellipsoid_axes_upperBound;
        double zero_turn_flyby_distance_lowerBound;
        double zero_turn_flyby_distance_upperBound;
        double terminal_intercept_flyby_distance_lowerBound;
        double terminal_intercept_flyby_distance_upperBound;
        double escape_spiral_starting_radius_lowerBound;
        double escape_spiral_starting_radius_upperBound;
        double escape_spiral_final_radius_lowerBound;
        double escape_spiral_final_radius_upperBound;
        double capture_spiral_final_radius_lowerBound;
        double capture_spiral_final_radius_upperBound;
        double capture_spiral_starting_radius_lowerBound;
        double capture_spiral_starting_radius_upperBound;
        double journey_end_deltav_lowerBound;
        double journey_end_deltav_upperBound;
        PropulsionSystemChoice journey_end_propulsion_system_lowerBound;
        PropulsionSystemChoice journey_end_propulsion_system_upperBound;
        size_t perturbation_bodies_lowerBound;
        size_t perturbation_bodies_upperBound;
        size_t freeze_maneuver_variables_lowerBound;
        size_t freeze_maneuver_variables_upperBound;
        double ephemeris_pegged_orbit_insertion_SMA_lowerBound;
        double ephemeris_pegged_orbit_insertion_SMA_upperBound;
        double ephemeris_pegged_orbit_insertion_ECC_lowerBound;
        double ephemeris_pegged_orbit_insertion_ECC_upperBound;
        std::vector<double> ephemeris_pegged_orbit_insertion_dv_bounds_lowerBound;
        std::vector<double> ephemeris_pegged_orbit_insertion_dv_bounds_upperBound;
        double impact_momentum_enhancement_factor_lowerBound;
        double impact_momentum_enhancement_factor_upperBound;
        double spacecraft_drag_area_lowerBound;
        double spacecraft_drag_area_upperBound;
        double coefficient_of_drag_lowerBound;
        double coefficient_of_drag_upperBound;
        size_t central_body_gravity_degree_lowerBound;
        size_t central_body_gravity_degree_upperBound;
        size_t central_body_gravity_order_lowerBound;
        size_t central_body_gravity_order_upperBound;
        double probe_separation_impulse_lowerBound;
        double probe_separation_impulse_upperBound;
        double probe_mass_lowerBound;
        double probe_mass_upperBound;
        double Probe_AEI_elements_lowerBound;
        double Probe_AEI_elements_upperBound;
        double Probe_AEI_elements_bounds_lowerBound;
        double Probe_AEI_elements_bounds_upperBound;
        double Probe_AEI_elements_reference_epoch_lowerBound;
        double Probe_AEI_elements_reference_epoch_upperBound;
        StateRepresentation Probe_AEI_elements_state_representation_lowerBound;
        StateRepresentation Probe_AEI_elements_state_representation_upperBound;
        ReferenceFrame Probe_AEI_elements_frame_lowerBound;
        ReferenceFrame Probe_AEI_elements_frame_upperBound;
        double Probe_End_elements_lowerBound;
        double Probe_End_elements_upperBound;
        double Probe_End_elements_bounds_lowerBound;
        double Probe_End_elements_bounds_upperBound;
        double Probe_End_elements_reference_epoch_lowerBound;
        double Probe_End_elements_reference_epoch_upperBound;
        StateRepresentation Probe_End_elements_state_representation_lowerBound;
        StateRepresentation Probe_End_elements_state_representation_upperBound;
        ReferenceFrame Probe_End_elements_frame_lowerBound;
        ReferenceFrame Probe_End_elements_frame_upperBound;
        double probe_communication_distance_bounds_lowerBound;
        double probe_communication_distance_bounds_upperBound;
        double probe_drag_area_probe_separation_to_AEI_lowerBound;
        double probe_drag_area_probe_separation_to_AEI_upperBound;
        double probe_drag_area_probe_AEI_to_end_lowerBound;
        double probe_drag_area_probe_AEI_to_end_upperBound;
        double probe_coefficient_of_drag_probe_separation_to_AEI_lowerBound;
        double probe_coefficient_of_drag_probe_separation_to_AEI_upperBound;
        double probe_coefficient_of_drag_probe_AEI_to_end_lowerBound;
        double probe_coefficient_of_drag_probe_AEI_to_end_upperBound;
        double probe_AEI_velocity_lowerBound;
        double probe_AEI_velocity_upperBound;
        double probe_end_velocity_lowerBound;
        double probe_end_velocity_upperBound;
        double ProbeSeparationToAEI_MatchPointFraction_lowerBound;
        double ProbeSeparationToAEI_MatchPointFraction_upperBound;
        double ProbeSeparationToAEI_ForwardIntegrationStepLength_lowerBound;
        double ProbeSeparationToAEI_ForwardIntegrationStepLength_upperBound;
        double ProbeSeparationToAEI_BackwardIntegrationStepLength_lowerBound;
        double ProbeSeparationToAEI_BackwardIntegrationStepLength_upperBound;
        double ProbeAEI_to_end_MatchPointFraction_lowerBound;
        double ProbeAEI_to_end_MatchPointFraction_upperBound;
        double ProbeAEI_to_end_ForwardIntegrationStepLength_lowerBound;
        double ProbeAEI_to_end_ForwardIntegrationStepLength_upperBound;
        double ProbeAEI_to_end_BackwardIntegrationStepLength_lowerBound;
        double ProbeAEI_to_end_BackwardIntegrationStepLength_upperBound;
        double EphemerisOutputResolution_lowerBound;
        double EphemerisOutputResolution_upperBound;
        
    }; //end class journeyoptions

}//close namespace EMTG
